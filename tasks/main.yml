# vim: ai et ts=2 st=2 sw=2 :
---
- name: Check if we are running supported os
  ansible.builtin.assert:
    fail_msg: "{{ role_name }} only supports ubuntu versions 20, 22, centos versions 7, centos strem versions 8, rhel versions 8, 9!"
    success_msg: "{{ role_name }} supports {{ ansible_distribution }} version {{ ansible_distribution_version }}"
    quiet: "{{ not ansible_check_mode }}"
    that:
      ( ansible_distribution == "Ubuntu" and ansible_distribution_version|int in [20, 22, 24] )
      or ( ansible_distribution == "CentOS" and ansible_distribution_major_version|int in [7, 8] )
      or ( ansible_os_family == "RedHat" and ansible_distribution_major_version|int in [8, 9] )

- name: Check if dockerd is running
  ansible.builtin.command:
    argv:
      - service
      - docker
      - status
  register: docker_running
  failed_when: false
  changed_when: false
  check_mode: false

- name: Set variable if docker is running
  ansible.builtin.set_fact:
    is_docker: "{{ docker_running.rc == 0 }}"

- name: Check if neutron is loaded
  ansible.builtin.shell: "set -o pipefail && iptables-save | grep ':neutron'"
  args:
    executable: bash
  register: neutron_loaded
  changed_when: false
  failed_when: false
  check_mode: false

- name: Set variable if neutron is loaded
  ansible.builtin.set_fact:
    is_neutron_loaded: "{{ neutron_loaded.rc == 0 }}"

- name: Turn off ufw and firewalld
  ansible.builtin.include_tasks:
    file: "{{ ansible_os_family | lower }}.yml"

- name: Set ipv4 forwarding
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: "{{ 1 if firewall_enable_ipv4_forward else 0 }}"

- name: Set ipv6 forwarding
  ansible.posix.sysctl:
    name: net.ipv6.conf.all.forwarding
    value: "{{ 1 if firewall_enable_ipv6_forward else 0 }}"
