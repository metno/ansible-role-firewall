# vim: ai et ts=2 st=2 sw=2 :
---
- name: Set name of iptables service ubuntu >= 16
  ansible.builtin.set_fact:
    iptables_service_name: netfilter-persistent
  when: ansible_distribution_version | int >= 16

- name: Check if ufw package is installed (on debian)
  ansible.builtin.shell: dpkg --get-selections ufw | grep install
  args:
    warn: false
  register: ufw_installed
  ignore_errors: true
  changed_when: false
  when:
    - firewall_disable_ufw

- name: Disable the ufw firewall (on debian, if configured)
  ansible.builtin.service:
    name: ufw
    state: stopped
    enabled: false
  when:
    - not ansible_check_mode
    - firewall_disable_ufw
    - ufw_installed.rc == 0

- name: Add persistance for iptables
  ansible.builtin.apt:
    name:
      - iptables
      - iptables-persistent
    force_apt_get: true
    update_cache: true
    cache_valid_time: "{{ 3600 * 3 }}"

- name: Iptables templates
  ansible.builtin.template:
    src: "{{ item.0 }}.j2"
    dest: "/etc/iptables/{{ item.1 }}"
    owner: root
    group: root
    mode: 0600
    validate: bash -c 'cat %s | /sbin/{{ item.0 }}-restore --test'
  loop:
    - - iptables
      - rules.v4
    - - ip6tables
      - rules.v6
  register: iptables_templates
  when:
    - not is_docker
    - not firewall_is_neutron

- name: Iptables templates for docker hosts
  ansible.builtin.template:
    src: "{{ item.0 }}.j2-docker"
    dest: "/etc/iptables/{{ item.1 }}"
    owner: root
    group: root
    mode: 0600
    validate: bash -c 'cat %s | /sbin/{{ item.0 }}-restore --test'
  loop:
    - - iptables
      - rules.v4
    - - ip6tables
      - rules.v6
  register: iptables_templates_docker
  when: is_docker

- name: Iptables templates for neutron hosts
  ansible.builtin.template:
    src: "{{ item.0 }}.j2-neutron"
    dest: "/etc/iptables/{{ item.1 }}"
    owner: root
    group: root
    mode: 0600
    validate: bash -c 'cat %s | /sbin/{{ item.0 }}-restore --test'
  loop:
    - - iptables
      - rules.v4
    - - ip6tables
      - rules.v6
  register: iptables_templates_neutron
  when: firewall_is_neutron

- name: Load new rules
  ansible.builtin.shell: "set -o pipefail && cat /etc/iptables/{{ item.1 }} | {{ item.0 }}-restore --noflush"
  args:
    executable: bash
  loop:
    - - iptables
      - rules.v4
    - - ip6tables
      - rules.v6
  when:
    - iptables_templates is changed or iptables_templates_docker is changed or iptables_templates_neutron is changed
    - not firewall_flush_on_change
    - not is_neutron_loaded

- name: Load new rules when neutron is loaded
  ansible.builtin.shell: "set -o pipefail && cat /etc/iptables/{{ item.1 }} | sed 's/^:neutron.*$//g' | {{ item.0 }}-restore --noflush"
  args:
    executable: bash
  loop:
    - - iptables
      - rules.v4
    - - ip6tables
      - rules.v6
  when:
    - iptables_templates_neutron is changed
    - not firewall_flush_on_change
    - is_neutron_loaded

- name: Restart iptables
  ansible.builtin.service:
    name: "{{ iptables_service_name }}"
    state: restarted
  when:
    - iptables_templates is changed or iptables_templates_docker is changed or iptables_templates_neutron is changed
    - firewall_flush_on_change
